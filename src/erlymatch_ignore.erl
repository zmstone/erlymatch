
-module(erlymatch_ignore).

-export([ fix/2
]).

%% -----------------------------------------------------------------------------
%% fix(A, B): fix the '_' atoms in variable A (converted from pattern)
%% i.e. replace them with real values from variable B
%% -----------------------------------------------------------------------------
fix(A, B) when is_atom(A) ->
    fix_atom(A, B);
fix(A, B) when is_list(A), is_list(B) ->
    fix_list(A, B);
fix(A, B) when is_tuple(A), is_tuple(B) ->
    fix_tuple(A, B);
fix(A, _B) ->
    A.

%% -----------------------------------------------------------------------------
%% when A is atom, check if it's '_'
%% -----------------------------------------------------------------------------
fix_atom('_', B) -> B;
fix_atom(A, _B) -> A.

%% -----------------------------------------------------------------------------
%% fix({'_', '_'}, {a, b}) -> {a, b}.
%% -----------------------------------------------------------------------------
fix_tuple(A, B) ->
    list_to_tuple(fix_list(tuple_to_list(A), tuple_to_list(B))).

%% -----------------------------------------------------------------------------
%% fix_list(['_' | '_'], [a, b, c, d]) -> [a, b, c, d]. 
%% -----------------------------------------------------------------------------
fix_list('_', B) ->
    B;
fix_list([], _) ->
    [];
fix_list(A, []) ->
    fix_list_tail(A);
fix_list([H | T1], [H | T2]) ->
    [H | fix_list(T1, T2)];
fix_list([H1 | T1], [H2 | T2]) ->
    [fix(H1, H2) | fix_list(T1, T2)].

%% -----------------------------------------------------------------------------
%% fix [a, b, c | '_'] to [a, b, c | []]
%% -----------------------------------------------------------------------------
fix_list_tail([]) ->
  [];
fix_list_tail('_') ->
  [];
fix_list_tail([H | T]) ->
  [H | fix_list_tail(T)].

